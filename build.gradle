//file:noinspection GroovyAssignabilityCheck
plugins {
    id("org.jetbrains.kotlin.jvm")
    id("cc.woverflow.loom")
    id("dev.architectury.architectury-pack200")
    id("com.replaymod.preprocess")
    id("maven-publish")
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url "https://repo.sk1er.club/repository/maven-public" }
    maven { url 'https://repo.spongepowered.org/repository/maven-public/' }
}

mcVersion = project.ext.mcVersion
def mcVersionStr = "${(int) (mcVersion / 10000)}.${(int) (mcVersion / 100) % 100}" + (mcVersion % 100 == 0 ? '' : ".${mcVersion % 100}")

preprocess {
    vars.put("MC", mcVersion)
}

version = modVersion
group = "tech.thatgravyboat"
archivesBaseName = "Craftify"

kotlin.jvmToolchain {
    languageVersion = JavaLanguageVersion.of(8)
}

loom {
    launchConfigs {
        client {
            arg("--tweakClass", "gg.essential.loader.stage0.EssentialSetupTweaker")
        }
    }
    runConfigs {
        client {
            ideConfigGenerated = true
        }
    }
    forge {
        pack200Provider = new dev.architectury.pack200.java.Pack200Adapter()
    }
}

configurations {
    include
    implementation.extendsFrom(include)
}

dependencies {
    minecraft("com.mojang:minecraft:$minecraftVersion")
    mappings("de.oceanlabs.mcp:$mappingsVersion")
    forge("net.minecraftforge:forge:$forgeVersion")

    include "gg.essential:loader-launchwrapper:1.1.3"
    compileOnly "gg.essential:essential-${mcVersionStr}-forge:1933"

    compileOnly 'org.spongepowered:mixin:0.8.4-SNAPSHOT'
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraftVersion
    // replace stuff in mcmod.info, nothing else
    filesMatching("mcmod.info") {
        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraftVersion
    }

    rename '(.+_at.cfg)', 'META-INF/$1'
}

sourceSets {
    main {
        output.resourcesDir = java.classesDirectory
    }
}

jar {
    dependsOn configurations.include
    from(configurations.include.collect { it.isDirectory() ? it : zipTree(it) }) {
        def i = 0
        filesMatching("META-INF/NOTICE*") { name = "$name.${i++}" }
        filesMatching("META-INF/LICENSE*") { name = "$name.${i++}" }
        filesMatching("META-INF/mods.toml") { name = "$name.${i++}" }
        filesMatching("LICENSE*") { name = "$name.${i++}" }
    }

    manifest.attributes(
            'ModSide': 'CLIENT',
            'ForceLoadAsMod': true,
            'TweakClass': 'gg.essential.loader.stage0.EssentialSetupTweaker',
            "TweakOrder": "0"
    )
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs += ['-Xopt-in=kotlin.RequiresOptIn', '-Xjvm-default=all']
    }
}